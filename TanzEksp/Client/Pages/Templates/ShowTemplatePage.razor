@using Microsoft.AspNetCore.Authorization
@using TanzEksp.Client.Services
@using TanzEksp.Shared.DTO
@inject TripEventService tripeventservice
@inject DayPlanService dayPlan
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin,User")]

@page "/templates"

<div class="button-wrapper">
    <button class="btn-add" @onclick="ShowAddTripEventModal">Tilføj TripEvent</button>

    <select @bind="SelectedTripType" class="triptype-filter">
        <option value="">Alle</option>
        <option value="Safari">Safari</option>
        <option value="Zanzibar">Zanzibar</option>
        <option value="Kilimanjaro">Kilimanjaro</option>
        <option value="Rundrejse">Rundrejse</option>

    </select>
</div>

@if (errorMessage != null)
{
    <p class="error">@errorMessage</p>
}

@if (tripEvents == null)
{
    <p>Henter Tripevents...</p>
}
else
{
    <div class="trip-event-wrapper">
        @foreach (var tripEvent in filteredTripEvents)
        {
            <div class="trip-event-card">
                <h3 class="trip-event-title">@tripEvent.Title</h3>
                <p class="trip-event-description"><strong>Beskrivelse:</strong> @tripEvent.Description</p>
                <p class="trip-event-duration"><strong>Varighed:</strong> @tripEvent.Days dage</p>
                <p class="trip-event-price"><strong>Pris:</strong> @tripEvent.Price DKK</p>
                <div class="trip-event-actions">
                    <button class="btn-add" @onclick="() => NavigateToManageDayPlanPage(tripEvent.Id)"> Se dagsplan</button>
                    <button class="btn-add" @onclick="() => NavigateToEditTemplatePage(tripEvent.Id)">Redigere </button>
                </div>
            </div>
        }
    </div>
}

@if (showTripEventModal)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h3>@modalTitle</h3>
            <EditForm Model="@currentTripEvent" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div>
                    <label for="Title">Titel:</label>
                    <input type="text" id="Title" @bind="currentTripEvent.Title" required />
                </div>
                <div>
                    <label for="description">Beskrivelse:</label>
                    <input type="text" id="description" @bind="currentTripEvent.Description" required />
                </div>
                <div>
                    <label for="days">Dage:</label>
                    <input type="number" id="days" @bind="currentTripEvent.Days" required />
                </div>
                <div>
                    <label for="price">Pris:</label>
                    <input type="number" id="price" @bind="currentTripEvent.Price" required />
                </div>
                <button type="submit" class="btn-add">@modalButtonLabel</button>
                <button type="button" class="btn-delete" @onclick="HideTripEventModal">Luk</button>
            </EditForm>
        </div>
    </div>
}

@code {
    private bool isDropdownOpen = false;
    private List<TripEventDTO> tripEvents;
    private TripEventDTO currentTripEvent = new TripEventDTO();
    private int? TripEventIdUpdate;
    private int? tripEvent; 

    private string errorMessage;
    private string modalTitle = "Tilføj TripEvent";
    private string modalButtonLabel = "Gem TripEvent";
    private bool showTripEventModal = false;

    private List<TripEventDTO> filteredTripEvents;
    private string selectedTripType = "";

    private string SelectedTripType
    {
        get => selectedTripType;
        set
        {
            if (selectedTripType != value)
            {
                selectedTripType = value;
                FilterTripEvents(); // Kør filtrering hver gang værdien ændres
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            tripEvents = await tripeventservice.GetAllTripEventsAsync();
            filteredTripEvents = tripEvents;
        }
        catch (HttpRequestException ex)
        {
            errorMessage = "Der opstod en fejl ved hentning af tripevents: " + ex.Message;
        }
        catch (Exception ex)
        {
            errorMessage = "En ukendt fejl opstod: " + ex.Message;
        }
    }

    void ShowAddTripEventModal()
    {
        modalTitle = "Tilføj TripEvent";
        modalButtonLabel = "Gem TripEvent";
        currentTripEvent = new TripEventDTO();
        showTripEventModal = true;
    }

    void ShowEditTripEventModal(TripEventDTO tripEvent)
    {
        modalTitle = "Redigere TripEvent";
        modalButtonLabel = "Opdater TripEvent";
        currentTripEvent = tripEvent;
        showTripEventModal = true;
    }

    private async Task HandleValidSubmit()
    {
		currentTripEvent.IsTemplate = true; 
        await SaveTripEvent();
    }

    private async Task SaveTripEvent()
    {
        try
        {
            if (TripEventIdUpdate.HasValue)
            {
                await tripeventservice.UpdateTripEventAsync(currentTripEvent);
            }
            else
            {
                await tripeventservice.AddTripEventAsync(currentTripEvent);
            }

            showTripEventModal = false;
            await OnInitializedAsync();
        }
        catch (Exception ex)
        {
            errorMessage = "En fejl opstod ved gemning af trip event: " + ex.Message;
        }
    }

    private Task HandleInvalidSubmit()
    {
        return Task.CompletedTask;
    }

    void HideTripEventModal()
    {
        currentTripEvent = new TripEventDTO();
        showTripEventModal = false;
    }

    private void NavigateToEditTemplatePage(int id)
    {
        NavigationManager.NavigateTo($"/EditTemplatePage/{id}");
    }

    private void NavigateToManageDayPlanPage(int id)
    {
        NavigationManager.NavigateTo($"/ManageDayPlanPage/{id}");
    }

    private void OnFilterChange(ChangeEventArgs e)
    {
        selectedTripType = e.Value?.ToString();
        FilterTripEvents();
    }

    private void FilterTripEvents()
    {
        if (string.IsNullOrWhiteSpace(selectedTripType))
        {
            filteredTripEvents = tripEvents;
        }
        else 
        {
            filteredTripEvents = tripEvents.Where(te => te.Title != null && te.Title.Contains(selectedTripType, StringComparison.OrdinalIgnoreCase))
            .ToList();
        }
    }
}
