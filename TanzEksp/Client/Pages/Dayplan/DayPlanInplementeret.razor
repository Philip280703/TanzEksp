@* @page "/ManageDayPlanPage/{id:int}"

@using Microsoft.AspNetCore.Authorization
@using TanzEksp.Client.Services
@using TanzEksp.Shared.DTO
@inject TripEventService tripeventservice
@inject DayPlanService dayPlanService
@inject NavigationManager NavigationManager


<h3>Dagsplan for: @tripEvent?.Title</h3>

@if (errorMessage != null)
{
    <p class="error">@errorMessage</p>
}

@if (DayPlans == null || !DayPlans.Any())
{
    <p>Henter dagsplaner...</p>
}
else
{
    <div class="trip-event-wrapper">
        @foreach (var dayPlan in DayPlans)
        {
            <div class="trip-event-card">
                <h3 class="trip-event-title">@dayPlan.Title</h3>
                <p><strong>Beskrivelse:</strong> @dayPlan.Description</p>
                <p><strong>Overnatning:</strong> @dayPlan.Accommodation</p>
                <p><strong>Forplejning:</strong> @dayPlan.Meals</p>
                <div class="action-buttons">
                    <button class="btn-delete" @onclick="() => DeleteDayPlan(dayPlan.Id)">Slet</button>
                    <button class="btn-update" @onclick="() => ShowUpdateDayPlanModal(dayPlan)">Rediger</button>
                </div>
            </div>
        }
    </div>
}

@if (showDayPlanModal)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h3>@modalTitle</h3>
            <EditForm Model="@currentDayPlan" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div>
                    <label for="title">Titel:</label>
                    <input type="text" id="title" @bind="currentDayPlan.Title" required />
                </div>
                <div>
                    <label for="description">Beskrivelse:</label>
                    <input type="text" id="description" @bind="currentDayPlan.Description" required />
                </div>
                <div>
                    <label for="accommodation">Overnatning:</label>
                    <input type="text" id="accommodation" @bind="currentDayPlan.Accommodation" />
                </div>
                <div>
                    <label for="meals">Forplejning:</label>
                    <input type="text" id="meals" @bind="currentDayPlan.Meals" />
                </div>
                <button type="submit" class="btn-add">@modalButtonLabel</button>
                <button type="button" class="btn-delete" @onclick="HideDayPlanModal">Annuller</button>
            </EditForm>
        </div>
    </div>
}


@code {
    [Parameter]
    public int id { get; set; }

    private TripEventDTO tripEvent;
    public List<DayPlanDTO> DayPlans { get; set; } = new List<DayPlanDTO>();
    private DayPlanDTO currentDayPlan = new DayPlanDTO();
    private string errorMessage;

    private bool showDayPlanModal = false;
    private string modalTitle = "";
    private string modalButtonLabel = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            tripEvent = await tripeventservice.GetTripEventByIdAsync(id);
            DayPlans = tripEvent.DayPlans?.ToList() ?? new List<DayPlanDTO>();
        }
        catch (Exception ex)
        {
            errorMessage = "En fejl opstod da rejsen skulle loades: " + ex.Message;
        }
    }

    private async Task DeleteDayPlan(int dayPlanId)
    {
        try
        {
            await dayPlanService.DeleteDayPlanAsync(dayPlanId);
            DayPlans = await dayPlanService.GetAll();
        }
        catch (Exception ex)
        {
            errorMessage = "Der opstod en fejl ved sletning af dagsplan: " + ex.Message;
        }
    }

    private void ShowUpdateDayPlanModal(DayPlanDTO dayPlan)
    {
        currentDayPlan = new DayPlanDTO
            {
                Id = dayPlan.Id,
                TripEventId = dayPlan.TripEventId,
                Title = dayPlan.Title,
                Description = dayPlan.Description,
                Accommodation = dayPlan.Accommodation,
                Meals = dayPlan.Meals
            };

        modalTitle = "Rediger dagsplan";
        modalButtonLabel = "Opdater dagsplan";
        showDayPlanModal = true;
    }

    private void ShowAddDayPlanModal()
    {
        currentDayPlan = new DayPlanDTO { TripEventId = id };
        modalTitle = "Tilføj dagsplan";
        modalButtonLabel = "Gem dagsplan";
        showDayPlanModal = true;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (currentDayPlan.Id > 0)
                await dayPlanService.UpdateDayPlanAsync(currentDayPlan);
            else
                await dayPlanService.AddDayPlanAsync(currentDayPlan);

            await RefreshDayPlans();
            showDayPlanModal = false;
        }
        catch (Exception ex)
        {
            errorMessage = "Fejl under gemning: " + ex.Message;
        }
    }

    private void HandleInvalidSubmit()
    {
        errorMessage = "Der opstod en fejl under validering af formularen.";
    }

    private async Task RefreshDayPlans()
    {
        DayPlans = await dayPlanService.GetAll();
    }

    private void HideDayPlanModal()
    {
        currentDayPlan = new DayPlanDTO();
        showDayPlanModal = false;
    }
}
 *@