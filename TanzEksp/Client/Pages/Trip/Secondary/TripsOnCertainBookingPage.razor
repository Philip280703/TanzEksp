@inject TripService tripService
@inject BookingService bookingService
@inject CustomerService customerService
@inject TripEventService tripEventService
@inject DayPlanService dayPlanService
@attribute [Authorize(Roles = "Admin, User")]
@using Microsoft.AspNetCore.Authorization
@using TanzEksp.Shared.DTO
@using TanzEksp.Client.Services
@using Microsoft.AspNetCore.Components.Forms

@page "/TripsOnCertainBooking/{bookingId:guid}"

@if (booking == null || customer == null)
{
	<p>Henter data...</p>
}
else
{
	<h4>Kunde info: @customer.FirstName @customer.LastName</h4>
	<h4>Booking ID: @bookingId</h4>
	<h5>Afrejsedato: @booking.DepartureDate?.ToShortDateString()</h5>
	<h5>Trip ID : @(booking.TripId?.ToString() ?? "Ingen")</h5>

	@if (booking.TripId == null)
	{
		<button class="btn-add" @onclick="ShowAddTripModal">Tilføj rejse til booking</button>
	}
	else
	{
		<button class="btn-add" @onclick="ShowAddTripEventModal">Tilføj TripEvent</button>

		<div class="table">
			<table class="rejse-table">
				<thead>
					<tr>
						<th>Titel</th>
						<th>Pris</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var tripEvent in tripEventsInTrip)
					{
						<tr class="trip-event-row">
							<td>@tripEvent.Title</td>
							<td>@tripEvent.Price</td>
						</tr>

						@if (tripEvent.DayPlans != null && tripEvent.DayPlans.Any())
						{
							<tr>
								<td colspan="2">
									<table class="dayplan-subtable">
										<thead>
											<tr>
												<th>Dagsnummer</th>
												<th>Forplejning</th>
											</tr>
										</thead>
										<tbody>
											@foreach (var dayplan in tripEvent.DayPlans)
											{
												<tr class="dayplan-row">
													<td>@dayplan.Title</td>
													<td>@dayplan.Meals</td>
												</tr>
											}
										</tbody>
									</table>
								</td>
							</tr>
						}
					}
				</tbody>
			</table>
		</div>

	}
}



@if (AddTripModal)
{
	<div class="modal-overlay">
		<div class="modal-content">
			<h3>Tilføj rejse til booking</h3>
			<div>
				<button class="btn-add" @onclick="AddPrivateTrip">Tilføj privat rejse</button>
			</div>
			<div>
				<button class="btn-add" @onclick="AddGroupTrip">Tilføj gruppe rejse</button>
			</div>
		</div>
	</div>
}

@if (AddTripEventModal)
{
	<div class="modal-overlay">
		<div class="modal-content">
			<h3>Tilføj TripEvent</h3>
			<div>
				<label for="Title">Titel:</label>
				<select @bind="selectedTripEventId" class="custom-select">
					@foreach (var tripEvent in tripEvents)
					{
						<option value="@tripEvent.Id">@tripEvent.Title</option>
					}
				</select>
			</div>
			<div>
				<button class="btn-add" @onclick="() => AddTripEventToBooking(bookingId, selectedTripEventId)">Tilføj</button>
			</div>
			<div>
				<button class="btn-remove" @onclick="ShowAddTripEventModal">Luk</button>
			</div>
		</div>
	</div>
}


@code {
	[Parameter]
	public Guid bookingId { get; set; }

	private BookingDTO booking { get; set; }
	private CustomerDTO customer { get; set; }
	private List<TripEventDTO> tripEvents { get; set; }
	private List<DayPlanDTO> dayPlans { get; set; } 
	private TripDTO trip { get; set; } = new TripDTO();
	private TripEventDTO TripEvent { get; set; } 

	private List<TripEventDTO> tripEventsInTrip{ get; set; } = new List<TripEventDTO>();
	private List<DayPlanDTO> DayPlanInTrip { get; set; } = new List<DayPlanDTO>();


	private int selectedTripEventId;

	private bool AddTripEventModal { get; set; } = false;
	private bool AddTripModal { get; set; } = false;

	protected override async Task OnInitializedAsync()
	{
		booking = await bookingService.GetBookingByIdAsync(bookingId);
		customer = await customerService.GetCustomerByIdAsync(booking.CustomerId);

		tripEvents = await tripEventService.GetAllTripEventsAsync();
		tripEventsInTrip = tripEvents.Where(x => x.TripId == booking.TripId).ToList();

		dayPlans = await dayPlanService.GetAll();
		DayPlanInTrip = dayPlans.Where(x => x.TripEventId == booking.TripId).ToList();
	}

	private void ShowAddTripEventModal()
	{
		AddTripEventModal = !AddTripEventModal;
	}

	private async Task AddTripEventToBooking(Guid bookingId, int tripEventId)
	{
		TripEventDTO templateTE = new TripEventDTO();
		templateTE = await tripEventService.GetTripEventByIdAsync(tripEventId);

		TripEventDTO newTripEvent = new TripEventDTO();
		newTripEvent.Title = templateTE.Title;
		newTripEvent.Description = templateTE.Description;
		newTripEvent.Days = templateTE.Days;
		newTripEvent.Price = templateTE.Price;
		newTripEvent.IsTemplate = false;
		newTripEvent.TripId = booking.TripId;

		await tripEventService.AddTripEventAsync(newTripEvent);

		List<DayPlanDTO> dayPlanDTOs = new List<DayPlanDTO>();
		var allDayPlans = await dayPlanService.GetAll();
		dayPlanDTOs = allDayPlans.Where(x => x.TripEventId == tripEventId).ToList();

		foreach (var dayPlan in dayPlanDTOs)
		{
			DayPlanDTO newDayPlan = new DayPlanDTO();
			newDayPlan.TripEventId = booking.TripId ?? 0;
			newDayPlan.Title = dayPlan.Title;
			newDayPlan.Description = dayPlan.Description;
			newDayPlan.Accommodation = dayPlan.Accommodation;
			newDayPlan.Meals = dayPlan.Meals;
			await dayPlanService.AddDayPlanAsync(newDayPlan);
		}
	}

	private void ShowAddTripModal()
	{
		AddTripModal = !AddTripModal;
	}


	private void AddGroupTrip()
	{
		trip.TripType = "Group";
		AddTripToBooking();
	}
	private void AddPrivateTrip()
	{
		trip.TripType = "Private";
		AddTripToBooking();
	}
	private async Task AddTripToBooking()
	{
		try
		{
			await tripService.AddTripAsync(trip);
			var maxtrip = await tripService.GetAllTripsAsync();
			var xtrip = maxtrip.OrderByDescending(t => t.Id).FirstOrDefault();
			
			booking.TripId = xtrip.Id;
			await bookingService.UpdateBookingAsync(booking);
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error adding trip to booking: {ex.Message}");
		}
	}
}
