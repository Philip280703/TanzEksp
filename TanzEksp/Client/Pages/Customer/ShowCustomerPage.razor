@inject CustomerService customerservice
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin, User")]
@using Microsoft.AspNetCore.Authorization
@using TanzEksp.Shared.DTO
@using TanzEksp.Client.Services

@page "/customers"

<h3 class="customer-heading">Kunder</h3>

<div class="button-wrapper">
    <button class="btn-add" @onclick="ShowAddCustomerModal">Tilføj Kunde</button>
</div>

<div class="admin-container">

    @if (errorMessage != null)
    {
        <p class="error">@errorMessage</p>
    }

    @if (customer == null)
    {
        <p>Henter kunder...</p>
    }
    else
    {
        <div class="table-wrapper">
            <table class="customer-table">
                <thead>
                    <tr>
                        <th>Fornavn</th>
                        <th>Efternavn</th>
                        <th>Email</th>
                        <th>Telefonnummer</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var customer in customer)
                    {
                        <tr>
                            <td>@customer.FirstName</td>
                            <td>@customer.LastName</td>
                            <td>@customer.Email</td>
                            <td>@customer.PhoneNumber</td>
                            <td class="action-buttons">
                                <button class="btn-delete" @onclick="() => DeleteCustomer(customer.Id)">Slet</button>
                                <button class="btn-update" @onclick="() => ShowUpdateCustomerModal(customer.Id)">Rediger</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>
 
@if (showCustomerModal)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h3>@modalTitle</h3>
            <EditForm Model="@currentCustomer" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div>
                    <label for="firstName">Fornavn:</label>
                    <input type="text" id="firstName" @bind="currentCustomer.FirstName" required />
                </div>
                <div>
                    <label for="lastName">Efternavn:</label>
                    <input type="text" id="lastName" @bind="currentCustomer.LastName" required />
                </div>
                <div>
                    <label for="email">Email:</label>
                    <input type="email" id="email" @bind="currentCustomer.Email" required />
                </div>
                <div>
                    <label for="phone">Telefonnummer:</label>
                    <input type="tel" id="phone" @bind="currentCustomer.PhoneNumber" required />
                </div>
                <button type="submit" class="btn-add">@modalButtonLabel</button>
                <button type="button" class="btn-delete" @onclick="HideCustomerModal">Luk</button>
            </EditForm>
        </div>
    </div>
}


@code {
    private List<CustomerDTO> customer;
    private string errorMessage;

    private bool showCustomerModal = false;
    private string modalTitle = "Tilføj Kunde";
    private string modalButtonLabel = "Gem Kunde";
    private CustomerDTO currentCustomer = new CustomerDTO();
    private int? customerIdToUpdate;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            customer = await customerservice.GetAllCustomersAsync();
        }
        catch (HttpRequestException ex)
        {
            errorMessage = "Der opstod en fejl ved hentning af kunder: " + ex.Message;
        }
        catch (Exception ex)
        {
            errorMessage = "En ukendt fejl opstod: " + ex.Message;
        }
    }

    private async Task DeleteCustomer(int id)
    {
        await customerservice.DeleteCustomerAsync(id);
        customer = await customerservice.GetAllCustomersAsync();
    }

    
    void ShowAddCustomerModal()
    {
        modalTitle = "Tilføj Kunde";
        modalButtonLabel = "Gem Kunde";
        currentCustomer = new CustomerDTO();
        showCustomerModal = true;
    }

    void ShowUpdateCustomerModal(int id)
    {
        modalTitle = "Rediger Kunde";
        modalButtonLabel = "Opdater Kunde";
        customerIdToUpdate = id;

        currentCustomer = customer.FirstOrDefault(c => c.Id == id);
        showCustomerModal = true;
    }

    void HideCustomerModal()
    {
        currentCustomer = new CustomerDTO();
        showCustomerModal = false;
    }

    private async Task SaveCustomer()
    {
        try
        {
            if (customerIdToUpdate.HasValue)
            {
                await customerservice.UpdateCustomerAsync(currentCustomer);
            }
            else
            {
                await customerservice.AddCustomerAsync(currentCustomer);
            }

            showCustomerModal = false;
            await OnInitializedAsync();
        }
        catch (Exception ex)
        {
            errorMessage = "En fejl opstod ved gemning af kunde: " + ex.Message;
        }
    }

    private async Task HandleValidSubmit()
    {
        await SaveCustomer();
    }

    private Task HandleInvalidSubmit()
    {
        return Task.CompletedTask;
    }
}
