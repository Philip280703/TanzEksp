@inject BookingService bookingService
@inject CustomerService customerService
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "Admin, User")]
@using Microsoft.AspNetCore.Authorization
@using TanzEksp.Shared.DTO
@using TanzEksp.Client.Services

@page "/bookings"


<div class="button-wrapper">
    <button class="btn-add" @onclick="ShowNewBookingModal">Tilføj Booking</button>
</div>

<div class="admin-container">
    @if (errorMessage != null)
    {
        <p class="error">@errorMessage</p>
    }

    @if (bookings == null)
    {
        <p>Henter Bookinger...</p>
    }
    else
    {
        <div class="table-wrapper">
            <table class="bookings-table">
                <thead>
                    <tr>
                        <th>BookingId</th>
                        <th>Kunde</th>
                        <th>TripId</th>
                        <th>Antal Voksne</th>
                        <th>Antal Børn</th>
                        <th>Lufthavn</th>
                        <th>Afgangsdato</th>
                        <th>Varighed</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var booking in bookings)
                    {
                        
						var customer = customerList.FirstOrDefault(c => c.Id == booking.CustomerId);
                        <tr>
                            <td @onclick="() => NavigateTo(booking.Id)">@booking.Id</td>
                            <td @onclick="() => NavigateTo(booking.Id)">@customer.FirstName @customer.LastName </td>
                            <td @onclick="() => NavigateTo(booking.Id)">@booking.TripId</td>
                            <td @onclick="() => NavigateTo(booking.Id)">@booking.AdultCount</td>
                            <td @onclick="() => NavigateTo(booking.Id)">@booking.ChildCount</td>
                            <td @onclick="() => NavigateTo(booking.Id)">@booking.Airport</td>
                            <td @onclick="() => NavigateTo(booking.Id)">@booking.DepartureDate</td>
                            <td @onclick="() => NavigateTo(booking.Id)">@booking.TripLength</td>
                            <td class="action-buttons">
                                <button class="btn-delete" @onclick="() => DeleteBooking(booking.Id)">Slet</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>


@if (showBookingModal)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h3>@modalTitle</h3>
            <EditForm Model="@currentBooking" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div>
                    <label for="customerId">Kunde:</label>
                    <InputSelect id="customerId" class="form-control" @bind-Value="currentBooking.CustomerId">
                        <option value="">-- Vælg kunde --</option>
                        @foreach (var customer in customerList)
                        {
                            <option value="@customer.Id">@customer.FirstName @customer.LastName</option>
                        }
                    </InputSelect>
                </div>


                <div>
                    <label for="adultCount">Antal Voksne:</label>
                    <input type="number" id="adultCount" @bind="currentBooking.AdultCount" required />
                </div>
                <div>
                    <label for="childCount">Antal Børn:</label>
                    <input type="number" id="childCount" @bind="currentBooking.ChildCount" required />
                </div>
                <div>
                    <label for="airport">Lufthavn:</label>
                    <input type="text" id="airport" @bind="currentBooking.Airport" required />
                </div>
                <div>
                    <label for="departureDate">Afgangs Dato:</label>
                    <input type="date" id="departureDate" @bind="currentBooking.DepartureDate" required />
                </div>
                <div>
                    <label for="tripLength">Varighed (dage):</label>
                    <input type="number" id="tripLength" @bind="currentBooking.TripLength" required />
                </div>

                <button type="submit" class="btn-add">@modalButtonLabel</button>
                <button type="button" class="btn-delete" @onclick="HideBookingModal">Luk</button>
            </EditForm>
        </div>
    </div>
}





@code {
    private List<BookingDTO> bookings;
    private string errorMessage;
    private CustomerDTO currentCustomer;

	private List<CustomerDTO> customerList = new List<CustomerDTO>();
    private BookingDTO currentBooking = new BookingDTO();
    private bool showBookingModal = false;
    private string modalTitle = "Ny Booking";
    private string modalButtonLabel = "Gem Booking";
    private Guid? BookingId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            bookings = await bookingService.GetAllBookingsAsync();
            if (bookings == null)
            {
                errorMessage = "Kunne ikke hente bookinger fra serveren.";
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = "Der opstod en HTTP-fejl ved hentning af bookinger: " + ex.Message;
        }
        catch (Exception ex)
        {
            errorMessage = "En ukendt fejl opstod: " + ex.Message;
        }
		customerList = await customerService.GetAllCustomersAsync();
    }


    private async Task DeleteBooking(Guid bookingId)
    {
        try
        {
            await bookingService.DeleteBookingAsync(bookingId);
            bookings = await bookingService.GetAllBookingsAsync();
        }
        catch (HttpRequestException ex)
        {
            errorMessage = "Der opstod en fejl ved sletning af booking: " + ex.Message;
        }
        catch (Exception ex)
        {
            errorMessage = "En ukendt fejl opstod: " + ex.Message;
        }
    }

    private void ShowNewBookingModal()
    {
        currentBooking = new BookingDTO();
        modalTitle = "Ny booking";
        modalButtonLabel = "Gem booking";
        showBookingModal = true; 
    }

    private void HideBookingModal()
    {
        showBookingModal = false;
    }

    private async Task SaveBooking()
    {
        try
        {
            // if (currentBooking.Id == "00000000 - 0000 - 0000 - 0000 - 000000000000")
            // {
            //     await bookingService.UpdateBookingAsync(currentBooking);
            // }
            // else
            // {
            await bookingService.AddBookingAsync(currentBooking);
            // }

            showBookingModal = false;
            await OnInitializedAsync();
        }
        catch (Exception ex)
        {
            errorMessage = "En fejl opstod ved gemning af kunde: " + ex.Message;
        }
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
   //      if (currentBooking.Id == Guid.Empty)
   //      {
			// currentBooking.Id = Guid.NewGuid();
   //      }
        await SaveBooking();
    }

    private Task HandleInvalidSubmit()
    {
        return Task.CompletedTask;
    }

    private void NavigateTo(Guid bookingId)
    {
        navigationManager.NavigateTo($"/TripsOnCertainBooking/{bookingId}");
    }
}
